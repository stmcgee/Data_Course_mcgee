# R can handle all sorts of mathematical and logical expressions.
3+4 # Here, it will evaluate 3 + 4, but it ignores everything after the hashtag on this line
3+4 # Here, it will evaluate 3 + 4, but it ignores everything after the hashtag on this line
5*2 # This evaluates 5 times 2
10/3 # Can you figure out this one? ;)
3+4 # Here, it will evaluate 3 + 4, but it ignores everything after the hashtag on this line
5*2 # This evaluates 5 times 2
10/3 # Can you figure out this one? ;)
bob = 3+4 # This assigns the evaluated function (3 + 4) to an object (like a var
bozo = bob+jane
# R can process a host of logical evaluations.  For example we can ask whether bob or jane is greater...
bob > jane # This gives us the value "FALSE" - bob is 7, jane is 10
# R can process a host of logical evaluations.  For example we can ask whether bob or jane is greater...
bob > jane # This gives us the value "FALSE" - bob is 7, jane is 10
bob < jane # This gives the value "TRUE"
TRUE > FALSE
# One way to manually enter data is with the command c()
# That stands for "concatenate" and allows you to enter a series of values to be saved to a single object:
billy = c(2,3,4,5,6) # "billy" is now a NUMERIC VECTOR of 5 values
TRUE-FALSE
# This works for STRINGS as well. Strings are made up of characters
suzy = c("This","is","a","character","vector") # notice how each string is enclosed in quotes. That tells R it is a string
observation = c(1,2,3,4,5,6,7,8,9,10) # our vector of observations from a reeated experiment
wingspan = c(1.2,1.4,1.0,1.2,1.8,2.0,2.2,1.1,2.3,2.0) # our vector of wingspans
mass = c(0.43,0.44,0.32,0.44,0.52,0.55,0.56,0.42,0.51,0.57) # our vector of mass
cbind(observation,wingspan,mass)
View(data)
data
data
data[1,3]
data
data
View(data)
data
View(data)
View(data)
plot(x=data[,2], y=data[,3]) # the plot() function wants you to give it the vector for the x and y axes. DONE!
plot(x=data[,2], y=data[,3]) # the plot() function wants you to give it the vector for the x and y axes. DONE!
plot(x=data[,2], y=data[,3]) # the plot() function wants you to give it the vector for the x and y axes. DONE!
plot(x=data[,2], y=data[,3]) # the plot() function wants you to give it the vector for the x and y axes. DONE!
setwd("/Users/spencer/Desktop/Data_Course/Data_Course/assignments/")
df = read.csv("Assignment_4_modeling.R")
View(df)
install.packages("modelr")
install.packages("fitdistrplus")
library(modelr)
library(broom)
library(dplyr)
library(fitdistrplus)
library(ggplot2)
#### Load built-in mtcars data into data frame ####
dat = mtcars
###################################################
?mtcars
# Quick look at column classes and first rows
glimpse(dat)
dat$am[dat$am == 1] <- "Manual"
dat$am[dat$am == 0] <- "Automatic"
glimpse(dat)
# Change "am" column to factor from numeric
dat$am = as.factor(dat$am)
# double-check
glimpse(dat)
# quick summary stats for every column
summary(dat)
# quick plot
plot(dat) # whoa!
for(i in names(dat)){
plot(dat[,"mpg"] ~ dat[,i], xlab = i, ylab = "MPG", main = i)
}
# look at distribution of mpg
hist(dat$mpg)
plot(density(dat$mpg))
## try http:// if https:// URLS are not supporte
source("https://bioconductor.org/biocLite.R")
biocLite(c("GenomicFeatures", "AnnotationDbi"))
# BUT... there's no way to measure the height of every human.
# You can instead take a representative sample of humans and ESTIMATE the distribution of heights.
update(n)
# Plot random samples from a truly normal distribution:
points(density(rnorm(5)), col = "Red") # for 5 random samples
x<-seq(-4,4,length=2000)
y<-dnorm(x,mean=0, sd=1)
plot(x,y, type="l", lwd=2, main = "Normal Distribution")
points(density(rnorm(5)), col = "Red") # for 5 random samples
points(density(rnorm(10)), col = "Green") # for 10 random samples
points(density(rnorm(1000)), col = "Blue") # for 1000 random samples
points(density(rnorm(100000)), col = "Orange") # for 100000 random samples
points(density(rnorm(999999)), col = "Purple") # for 999999 random samples
hist(dat$mpg)
# The fitdist() function from fitdistrplus package let's us compare a vector of data to a given distribution
?fitdist
fitdist(dat$mpg, "norm")
# we can look at the fit of our data to the theoretical values given by a chosen distribution
plot(fitdist(dat$mpg, "norm"))
plot(fitdist(dat$mpg, "gamma"))
plot(fitdist(dat$mpg, "logis"))
# try it on a different vector of data
plot(fitdist(dat$cyl, "norm")) # whoa now!
# shows probability of getting a specific number of a certain outcome, given a probability for each result
# we can see it would be highly unlikely to get fewer than 10 tails in 50 coin flips.
?rnorm
# imagine flipping a coin 10 times...at the end, how many heads would you have?
# This is what a binomial distribution is all about... counts of an outcome of an experiment.
x = seq(0,50,by=1)
y = y <- dbinom(x,50,0.5)
plot(x,y, type = "l", main = "Binomial Dist. - N=50, P=0.5")
x = seq(0,10000,by=1)
y = y <- dbinom(x,10000,0.5)
plot(x,y, type = "l", main = "Binomial Dist. - N=10000, P=0.5")
?binom.test()
binom.test(x=4,n=50,p=0.5)  # 4 successes, out of 50 flips, probability of success is 0.5
binom.test(x=25,n=50,p=0.5)
binom.test(x=4,n=50,p=0.5)  # 4 successes, out of 50 flips, probability of success is 0.5
binom.test(x=4,n=50,p=0.1)  # 4 successes, out of 50 flips, probability of success is 0.1
sample(c("Heads","Tails"), size = 10, replace = TRUE) %>%
table()
x=1
heads = 0
num.heads = c()
flips = seq(from = 2, to = 500, by=2)
for(i in flips){
heads = table(sample(c("Heads","Tails"), size = i, replace = TRUE))[1]
num.heads[x] = heads
x=x+1
}
# plot!
plot(x=flips, y=num.heads/flips, ylim = c(0,1)) # Explain what this plot is showing!
ggplot(dat, mapping = aes(x=hp, y=mpg, col = am)) +
geom_point() +
geom_smooth(method = "aov", se = FALSE) +
ggtitle("No interaction between Transmission type and Horsepower") +
labs(subtitle = "...with respect to its effect on MPG")
ggplot(dat, mapping = aes(x=disp, y=mpg, col = am)) +
geom_point() +
geom_smooth(method = "aov", se = FALSE) +
ggtitle("Clear interaction between Transmission type and Horsepower") +
labs(subtitle = "...with respect to its effect on MPG")
# define a model: mpg, as explained by number of cylinders AND Displacement AND Weight
mod1 = glm(mpg ~ cyl + disp + wt, data = dat)
# look at how well each term in the model explains mpg
summary(mod1)
tidy(mod1)
# we can look at the model fit diagnostics visually as well
par(mfrow = c(2, 2)) # changes viewing panel into a 2x2 grid
plot(mod1) # show model fit plots for diagnostics
par(mfrow = c(1, 1)) # changes viewing panel back to single plot space
# We can use the modelr package to easily add predictions (made by our model)
dat %>% add_predictions(model = mod1)
# Save this as a new data frame
dat.mod1 = dat %>% add_predictions(model = mod1)
View(dat.mod1)
# Calculate the mean squared difference between actual and predicted values of mpg
mean((dat.mod1$mpg - dat.mod1$pred)^2)
mod2 = glm(mpg ~ cyl*wt, data = dat)
tidy(mod2)
dat.mod2 = dat %>% add_predictions(model = mod2)
mean((dat.mod2$mpg - dat.mod2$pred)^2)
plot(dat$mpg ~ dat$wt)
abline(mod1, col = "Red")
abline(mod2, col = "Blue")
abline(lm(mpg ~ wt, data = dat)) # linear model of mpg explained only by wt
points(dat$mpg ~ dat$wt, col = dat$cyl) # color over points, using No. of Cylinders as color values
ggplot(data = dat) +
geom_point(aes(x=wt, y=mpg, col = factor(cyl))) +
geom_smooth(aes(x=wt, y=mpg), method = "glm", col = "Black")
dat$cyl = as.factor(dat$cyl)
# categorical predictors of mpg...we can use ANOVA and Tukey's Test
mod3 = aov(mpg ~ factor(cyl)*am, data = dat)
par(mfrow = c(2, 2)) # changes viewing panel into a 2x2 grid
plot(mod3)
par(mfrow = c(1, 1))
summary(mod3)
# So let's say you see some significant interaction between two explanatory variables.
# How do you determine what what the specific effects are? All you see is "significant interaction"
TukeyHSD(mod3)
# So let's say you see some significant interaction between two explanatory variables.
# How do you determine what what the specific effects are? All you see is "significant interaction"
tuktest = TukeyHSD(mod3)
tuktest$`factor(cyl):am`
tuktest$`factor(cyl):am`
newdf = tuktest$`factor(cyl):am`[,"p adg"] %>% sort()
newdf = tuktest$`factor(cyl):am`[,"p adg"] %>% sort())
newdf = as.data.frame(tuktest$`factor(cyl):am`[,"p adg"] %>% sort())
newdf = as.data.frame(tuktest$`factor(cyl):am`[,"p adj"] %>% sort())
View(newdf)
install.packages(c("digest", "Rcpp", "tibble", "vegan", "viridisLite"))
decomp = data.frame(Food = c(rep("Banana", 40), rep("Apple", 40), rep("Gravy",40)),
University = c(rep(c("UVU","BYU"),times = 60)),
Decomposition_Rate = abs(rnorm(120))*c(1,4)*c(rep(1,40),rep(5,40),rep(1,40)))
decomp_model = aov(Decomposition_Rate ~ University:Food, data = decomp)
summary(decomp_model)
# Let's take a look and see if we can visually find the pattern
ggplot(decomp, mapping = aes(x=Food, y=Decomposition_Rate, fill = University)) +
geom_boxplot()
ggplot(decomp, mapping = aes(x=Food, y=Decomposition_Rate, fill = University)) +
geom_boxplot()
# a plot is fine, but how about a statistical test...
TukeyHSD(decomp_model)
# what I see: Food decomposes more rapidly at BYU, but apples, in particular, have a pronounced effect
dev.off()
ggplot(decomp, mapping = aes(x=Food, y=Decomposition_Rate, fill = University)) +
geom_boxplot()
setwd("/Users/spencer/Desktop/Data_Course/Data_Course/data/")
list.files()
dat = read.csv("thatch_ant.csv")
names(dat)
#why are these plots different???
plot(x=dat$Headwidth..mm., y=dat$Mass)
plot(x=dat$Size.class, y=dat$Mass)
# Let's modify and save these plots. Why not!?
?plot()
# 1.  Make a scatterplot of headwidth vs mass. See if you can get the points to be colored by "Colony"
plot(x=dat$Headwidth, y=dat$Mass, main = "Headwith_V_Mass", xlab = "Headwith", ylab = "Mass",col = (dat$Colony))
jpeg(filename = "/Users/spencer/Desktop/Data_Course/Data_Course_McGee/Assignments/Headwith_V_Mass.jpeg")
plot(x=dat$Headwidth, y=dat$Mass, main = "Headwith_V_Mass", xlab = "Headwith", ylab = "Mass",col = (dat$Colony))
dev.off
jpeg(filename = "/Users/spencer/Desktop/Data_Course/Data_Course_McGee/Assignments/Headwith_V_Mass.jpeg")
plot(x=dat$Headwidth, y=dat$Mass, main = "Headwith_V_Mass", xlab = "Headwith", ylab = "Mass",col = (dat$Colony))
dev.off
jpeg(filename = "/Users/spencer/Desktop/Data_Course/Data_Course_McGee/Assignments/Headwith_V_Mass.jpeg")
plot(x=dat$Headwidth, y=dat$Mass, main = "Headwith_V_Mass", xlab = "Headwith", ylab = "Mass",col = (dat$Colony))
dev.off()
# 3.  Subset the thatch ant data set to only include ants from colony 1 and colony 2
dat
# 3.  Subset the thatch ant data set to only include ants from colony 1 and colony 2
summary(dat)
# install.packages("dplyr")
library(dplyr) # install this package if you haven't already
# Clean it up just like previous class period
unique(dat$Headwidth)
mm = which(dat$Headwidth == "41mm")
empty = which(dat$Headwidth == "")
dat$Headwidth[mm] = "41.000"
dat$Headwidth[empty] = NA
unique(dat$Headwidth)
plot(x=dat$Headwidth, y=dat$Mass, main = "Headwith_V_Mass", xlab = "Headwith", ylab = "Mass",col = (dat$Colony))
jpeg(filename = "/Users/spencer/Desktop/Data_Course/Data_Course_McGee/Assignments/Headwith_V_Mass.jpeg")
plot(x=dat$Headwidth, y=dat$Mass, main = "Headwith_V_Mass", xlab = "Headwith", ylab = "Mass",col = (dat$Colony))
dev.off()
dat$Headwidth = as.numeric(dat$Headwidth)
dat = na.omit(dat)
plot(x=dat$Headwidth, y=dat$Mass, main = "Headwith_V_Mass", xlab = "Headwith", ylab = "Mass",col = (dat$Colony))
jpeg(filename = "/Users/spencer/Desktop/Data_Course/Data_Course_McGee/Assignments/Headwith_V_Mass.jpeg")
plot(x=dat$Headwidth, y=dat$Mass, main = "Headwith_V_Mass", xlab = "Headwith", ylab = "Mass",col = (dat$Colony))
dev.off()
# ....and the best of them all....
%>%  #no help file for this one. It's a "pipe" just like in Bash
# these next two lines are equivalent:
select(dat, Colony)
dat %>% select(Colony)
# select - selects COLUMNS
dat %>% select(-Colony) %>% head()
dat %>% select(starts_with("H")) %>% head()
# filter - selects ROWS
dat %>% filter(Headwidth > 40) %>% head()
# ....and the best of them all....
%>%  #no help file for this one. It's a "pipe" just like in Bash
# these next two lines are equivalent:
select(dat, Colony)
# dplyr "verbs"
?select()
?filter()
# select - selects COLUMNS
dat %>% select(-Colony) %>% head()
dat %>% select(starts_with("H")) %>% head()
dat %>% select(starts_with("1","2")) %>% head()
# select - selects COLUMNS
dat %>% select(-Colony) %>% head()
dat %>% select(starts_with("D")) %>% head()
# filter - selects ROWS
dat %>% filter(Distance <= 2) %>% head()
# 3.  Subset the thatch ant data set to only include ants from colony 1 and colony 2
dat %>% filter(Distance <= 2)
# 3.  Subset the thatch ant data set to only include ants from colony 1 and colony 2
dat %>% filter(Colony <= 2)
# 3.  Subset the thatch ant data set to only include ants from colony 1 and colony 2
dat2 = dat %>% filter(Colony <= 2)
# 4.  Write code to save this new subset as a .csv file
write.csv(dat2, file = "c:/Users/spencer/Desktop/Data_Course/Data_Course_McGee/Assignments/Ant_Colony_1-2", row.names = FALSE)
# 4.  Write code to save this new subset as a .csv file
write.csv(dat2, file = "c:/Users/spencer/Desktop/Data_Course/Data_Course_McGee/Assignments/Ant_Colony_1-2.csv", row.names = FALSE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(broom)
library(fitdistrplus)
library(MASS)
library(lme4)
d1 = read.csv("/Users/spencer/Desktop/Data_Course/Data_Course/data/mushroom_growth.csv")
list(df)
d1 = read.csv("/Users/spencer/Desktop/Data_Course/Data_Course/data/mushroom_growth.csv")
list(df)
glimpse(df)
plot(df)
df = read.csv("/Users/spencer/Desktop/Data_Course/Data_Course/data/mushroom_growth.csv")
list(df)
glimpse(df)
plot(df)
plot(fitdist(df$GrowthRate, distr = "norm"))
for (i in names(d1)){
plot(df[,"GrowthRate"] ~ df[,i], xlab = "GrowthRate", ylab = i, main = i)
}
for (i in names(df)){
plot(df[,"GrowthRate"] ~ df[,i], xlab = "GrowthRate", ylab = i, main = i)
}
mod1 = glm(GrowthRate ~ Species + Light + Humidity + Temperature + Nitrogen, data = df)
summary(mod1)
mod1 = aov(GrowthRate ~ Species + Light + Humidity + Temperature + Nitrogen, data = df)
summary(mod1)
mod2 = aov(GrowthRate ~ Species*Light*Humidity*Temperature*Nitrogen, data = df)
summary(mod2)
plot(x=df$Humidity,y=df$Temperature, col = df$Species)
plot(x=df$Temperature,y=df$Humidity, col = df$Species)
summary(mod2)
mod3 = aov(GrowthRate ~ Species*Light*Humidity*Temperature, data = df)
summary(mod3)
plot(fitdist(df$GrowthRate, distr = "norm"))
install.packages('ggthemes', dependencies = TRUE)
source('C:/Users/spencer/Desktop/Data_Course/Data_Course/assignments/Assignment_5_plotting.R', echo=TRUE)
ggsave("/Users/spencer/Desktop/plot3.png", dpi = 300)
library(vegan)
setwd("C:/Users/spencer/Desktop/Data_Course/Data_Course/Exam3/")
meta = read.csv("exam3_metadata.csv")
otu = read.csv("exam3_otu_table.csv")
names(otu)
otu$Tax_Name
(t(otu))
t_out = (t(otu))
meta2 = subset(meta, meta$SampleType %in% c("Soil","rhizosphere"))
s_r_samples = meta2$SampleID
otu2 = otu[,names(otu) %in% s_r_samples]
t_otu2 = t(otu2)
adonis(t_otu ~ meta2$SampleType * meta2$Location)
adonis(t_otu2 ~ meta2$SampleType * meta2$Location)
library(ggplot2) # Load ggplot
NMDS = metaMDS(t_otu) # Run NMDS with defaults
NMDS = metaMDS(t_otu2) # Run NMDS with defaults
MDS1 = NMDS$points[,1] # Extract points
MDS2 = NMDS$points[,2] # Extract points
df = data.frame(MDS1 = MDS1, MDS2 = MDS2, SampleType = meta2$SampleType, Location = meta2$Location)
ggplot(df, aes(x=MDS1,y=MDS2, color = Location)) +
geom_point() +
stat_ellipse() + theme_bw() + ggtitle("NMDS Plot by Location")
Smeta = subset(meta2, SampleType == "Soil")
Rmeta = subset(meta2, SampleType == "rhizosphere")
S_meta = subset(meta2, SampleType == "Soil")
R_meta = subset(meta2, SampleType == "rhizosphere")
S_otu = otu2[,names(otu2) %in% meta_soil$SampleID]
R_otu = otu2[,names(otu2) %in% meta_rhiz$SampleID]
S_otu = otu2[,names(otu2) %in% S_meta$SampleID]
R_otu = otu2[,names(otu2) %in% R_meta$SampleID]
max_s = max(rowsum(S_otu))
max_s = max(rowSums(S_otu))
max_r = max(rowSums(R_otu))
S_max_tax = which(rowSums(S_otu) == max_s)
r_max_tax = which(rowSums(R_otu) == max_r)
otu$Consensus.lineage[S_max_tax]
otu$Consensus.lineage[r_max_tax]
adonis(t_otu2 ~ meta2$SampleType * meta2$Location)
otu$Consensus.lineage[S_max_tax]
otu$Consensus.lineage[r_max_tax]
r_max_tax
S_max_tax
